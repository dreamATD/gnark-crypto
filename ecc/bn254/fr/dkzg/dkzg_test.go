// Copyright 2020 ConsenSys Software Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by consensys/gnark-crypto DO NOT EDIT

package dkzg

import (
	"bytes"
	"crypto/sha256"
	"math/big"
	"reflect"
	"testing"

	"github.com/consensys/gnark-crypto/ecc"
	"github.com/consensys/gnark-crypto/ecc/bn254/fr"
)

// testSRS re-used accross tests of the KZG scheme
var testSRS *SRS

func init() {
	const srsSize = 230
	testSRS, _ = NewSRS(ecc.NextPowerOfTwo(srsSize), []*big.Int{big.NewInt(42), big.NewInt(27)})
}

func TestDividePolyByXminusA(t *testing.T) {

	const pSize = 230

	// build random polynomial
	pol := make([]fr.Element, pSize)
	pol[0].SetRandom()
	for i := 1; i < pSize; i++ {
		pol[i] = pol[i-1]
	}

	// evaluate the polynomial at a random point
	var point fr.Element
	point.SetRandom()
	evaluation := eval(pol, point)

	// probabilistic test (using Schwartz Zippel lemma, evaluation at one point is enough)
	var randPoint, xminusa fr.Element
	randPoint.SetRandom()
	polRandpoint := eval(pol, randPoint)
	polRandpoint.Sub(&polRandpoint, &evaluation) // f(rand)-f(point)

	// compute f-f(a)/x-a
	h := dividePolyByXminusA(pol, evaluation, point)
	pol = nil // h reuses this memory

	if len(h) != 229 {
		t.Fatal("inconsistant size of quotient")
	}

	hRandPoint := eval(h, randPoint)
	xminusa.Sub(&randPoint, &point) // rand-point

	// f(rand)-f(point)	==? h(rand)*(rand-point)
	hRandPoint.Mul(&hRandPoint, &xminusa)

	if !hRandPoint.Equal(&polRandpoint) {
		t.Fatal("Error f-f(a)/x-a")
	}
}

func TestSerializationSRS(t *testing.T) {

	// create a SRS
	srs, err := NewSRS(64, []*big.Int{big.NewInt(42), big.NewInt(27)})
	if err != nil {
		t.Fatal(err)
	}

	// serialize it...
	var buf bytes.Buffer
	_, err = srs.WriteTo(&buf)
	if err != nil {
		t.Fatal(err)
	}

	// reconstruct the SRS
	var _srs SRS
	_, err = _srs.ReadFrom(&buf)
	if err != nil {
		t.Fatal(err)
	}

	// compare
	if !reflect.DeepEqual(srs, &_srs) {
		t.Fatal("scheme serialization failed")
	}

}

func TestCommit(t *testing.T) {

}

func TestVerifySinglePoint(t *testing.T) {

}

func TestBatchVerifySinglePoint(t *testing.T) {

}

func TestBatchVerifyMultiPoints(t *testing.T) {

}

const benchSize = 1 << 16

func BenchmarkKZGCommit(b *testing.B) {
	benchSRS, err := NewSRS(ecc.NextPowerOfTwo(benchSize), []*big.Int{big.NewInt(42), big.NewInt(27)})
	if err != nil {
		b.Fatal(err)
	}
	// random polynomial
	p := randomPolynomial(benchSize / 2)

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, _ = Commit(p, benchSRS)
	}
}

func BenchmarkDivideByXMinusA(b *testing.B) {
	const pSize = 1 << 22

	// build random polynomial
	pol := make([]fr.Element, pSize)
	pol[0].SetRandom()
	for i := 1; i < pSize; i++ {
		pol[i] = pol[i-1]
	}
	var a, fa fr.Element
	a.SetRandom()
	fa.SetRandom()

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		dividePolyByXminusA(pol, fa, a)
		pol = pol[:pSize]
		pol[pSize-1] = pol[0]
	}
}

func BenchmarkKZGOpen(b *testing.B) {
	benchSRS, err := NewSRS(ecc.NextPowerOfTwo(benchSize), []*big.Int{big.NewInt(42), big.NewInt(27)})
	if err != nil {
		b.Fatal(err)
	}

	// random polynomial
	p := randomPolynomial(benchSize / 2)
	var r fr.Element
	r.SetRandom()

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, _, _ = Open(p, r, benchSRS)
	}
}

func BenchmarkKZGVerify(b *testing.B) {
	benchSRS, err := NewSRS(ecc.NextPowerOfTwo(benchSize), []*big.Int{big.NewInt(42), big.NewInt(27)})
	if err != nil {
		b.Fatal(err)
	}

	// random polynomial
	p := randomPolynomial(benchSize / 2)
	var r fr.Element
	r.SetRandom()

	// commit
	comm, err := Commit(p, benchSRS)
	if err != nil {
		b.Fatal(err)
	}

	// open
	openingProof, _, err := Open(p, r, benchSRS)
	if err != nil {
		b.Fatal(err)
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		Verify(&comm, &openingProof, r, benchSRS)
	}
}

func BenchmarkKZGBatchOpen10(b *testing.B) {
	benchSRS, err := NewSRS(ecc.NextPowerOfTwo(benchSize), []*big.Int{big.NewInt(42), big.NewInt(27)})
	if err != nil {
		b.Fatal(err)
	}

	// 10 random polynomials
	var ps [10][]fr.Element
	for i := 0; i < 10; i++ {
		ps[i] = randomPolynomial(benchSize / 2)
	}

	// commitments
	var commitments [10]Digest
	for i := 0; i < 10; i++ {
		commitments[i], _ = Commit(ps[i], benchSRS)
	}

	// pick a hash function
	hf := sha256.New()

	var r fr.Element
	r.SetRandom()

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		BatchOpenSinglePoint(ps[:], commitments[:], r, hf, benchSRS)
	}
}

func BenchmarkKZGBatchVerify10(b *testing.B) {
	benchSRS, err := NewSRS(ecc.NextPowerOfTwo(benchSize), []*big.Int{big.NewInt(42), big.NewInt(27)})
	if err != nil {
		b.Fatal(err)
	}

	// 10 random polynomials
	var ps [10][]fr.Element
	for i := 0; i < 10; i++ {
		ps[i] = randomPolynomial(benchSize / 2)
	}

	// commitments
	var commitments [10]Digest
	for i := 0; i < 10; i++ {
		commitments[i], _ = Commit(ps[i], benchSRS)
	}

	// pick a hash function
	hf := sha256.New()

	var r fr.Element
	r.SetRandom()

	proof, _, err := BatchOpenSinglePoint(ps[:], commitments[:], r, hf, benchSRS)
	if err != nil {
		b.Fatal(err)
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		BatchVerifySinglePoint(commitments[:], &proof, r, hf, benchSRS)
	}
}

func randomPolynomial(size int) []fr.Element {
	f := make([]fr.Element, size)
	for i := 0; i < size; i++ {
		f[i].SetRandom()
	}
	return f
}
